{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Restaurant",
    "description": "This is a sample Restaurant Store Server",
    "version": "1.0.0"
  },

  "tags": [
    {
      "name": "restaurants",
      "description": "Everything about your restaurant"
    },
    

    
    {
      "name": "posts",
      "description": "Everything about your post"
    },
    {
      "name": "tables",
      "description": "Everything about your table"
    },
    {
      "name": "users",
      "description": "Everything about your user"
    }
  ],
  "paths": {
    "/restaurants": {
      "post": {
        "tags": ["restaurants"],
        "description": "con esta ruta pasan los datos del restaurante por body, al momento de crear no relacionar, relacionar después de crear con la ruta PUT",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "create a restaurant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/restaurants/:id": {
      "get": {
        "tags": ["restaurants"],
        "summary": "Find restaurants by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "post": {
        "tags": ["restaurants"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "delete": {
        "tags": ["restaurants"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["restaurants"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/posts": {
      "post": {
        "tags": ["posts"],
        "summary": "creará un posteo de esa comida. recibe todo por body ",
        "description": "creará un posteo de esa comida. recibe todo por body  ",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "Create the food dish",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Posts"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": ["posts"],
        "summary": "se manda un query para las page:   get '/posts?page=num' ",
        "description": "Se debe mandar un Query page=num .Trae todas las comidas paginadas, con posibilidad de filtros ",
        "operationId": "getPosts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Valor del page para que se muestre las comidas paginadas",
            "required": false,
            "explode": true,
            "schema": {
              "type": "int",
              "default": 1,
              "enum": [1, 2, 3]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Posts"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/posts/:id": {
      "get": {
        "tags": ["posts"],
        "summary": "trae solo la comida indicada por id.",
        "description": "Returns a single food dish",
        "operationId": "getPostsById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of posts to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Posts"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "delete": {
        "tags": ["posts"],
        "summary": "Con esta ruta se elimina el registro que coincida con el id pasado por params. ",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["posts"],
        "summary": "Actualiza un Posts",
        "description": "recibe el id por params. por body un objeto con el nombre de la propiedad a cambiar , y el nuevo valor. ",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Posts"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Posts"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:posts", "read:posts"]
          }
        ]
      }
    },

    "/tables": {
      "post": {
        "tags": ["tables"],
        "description": "con esta ruta pasan los datos del restaurante por body, al momento de crear no relacionar, relacionar después de crear con la ruta PUT",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "create a restaurant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/tables/:id": {
      "get": {
        "tags": ["tables"],
        "summary": "Find restaurants by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "post": {
        "tags": ["tables"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "delete": {
        "tags": ["tables"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["tables"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },

    "/users": {
      "post": {
        "tags": ["users"],
        "description": "con esta ruta pasan los datos del restaurante por body, al momento de crear no relacionar, relacionar después de crear con la ruta PUT",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "create a restaurant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/users/:id": {
      "get": {
        "tags": ["users"],
        "summary": "Find restaurants by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "post": {
        "tags": ["users"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["users"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Posts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Nombre"
          },
          "description": {
            "type": "string",
            "example": "Descripcion"
          },
          "ingredients": {
            "type": "string",
            "example": "Ingredientes secretos"
          },
          "original": {
            "type": "boolean",
            "example": true
          },
          "cost": {
            "type": "number",
            "example": 127
          },
          "rating": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          }
        },
        "xml": {
          "name": "posts"
        }
      },
      "Restaurants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "name": {
            "type": "string",
            "example": "Don Julio y Tegui"
          },
          "image": {
            "type": "Buffer",
            "example": "<Buffer 48 65 6c 6c 6f>"
          },
          "type_customer": {
            "type": "string",
            "example": "XXXXX"
          },
          "description": {
            "type": "string",
            "example": "La parrilla Don Julio, ubicada en el barrio de Palermo ..."
          },
          "tags": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          },
          "city": {
            "type": "string",
            "example": "Buenos Aires"
          },
          "address": {
            "type": "string",
            "example": "Guatemala 4699 Palermo Viejo"
          },
          "country": {
            "type": "string",
            "example": "Argentina"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+54 11 5311-5668"
          },
          "valoraciones": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          },
          "rating": {
            "type": "number",
            "example": 2
          }
        },
        "xml": {
          "name": "restaurants"
        }
      },
      "Tables": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "capacity": {
            "type": "number",
            "example": "6"
          }
        },
        "xml": {
          "name": "tables"
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Lali Esposito"
          },
          "email": {
            "type": "string",
            "example": "laliEsposito@gmail.com"
          },
          "image": {
            "type": "Buffer",
            "example": "<Buffer 48 65 6c 6c 6f>"
          },
          "type_customer": {
            "type": "string",
            "example": "?????????"
          },
          "description": {
            "type": "string",
            "example": "Descripcion corta"
          },
          "valoraciones": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          },
          "rating": {
            "type": "number",
            "example": 2
          }
        },
        "xml": {
          "name": "users"
        }
      }
    }
  }
}
