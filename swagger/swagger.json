{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Restaurant",
    "description": "This is a sample Restaurant Store Server",
    "version": "1.0.0"
  },

  "tags": [
    {
      "name": "restaurants",
      "description": "Everything about your restaurant"
    },
    {
      "name": "posts",
      "description": "Everything about your post"
    },
    {
      "name": "tables",
      "description": "Everything about your table"
    },
    {
      "name": "users",
      "description": "Everything about your user"
    }
  ],
  "paths": {
    "/restaurants": {
      "get": {
        "tags": ["restaurants"],
        "description": "Utilizando esta ruta el servidor respondera con un estatus 200 y enviara la información de todos los restaurantes como un array de objetos paginado, si no se adiciona query de paginado devolvera la pagina 1 por defecto",
        "operationId": "getRestaurants",
        "summary": "Traer todos los restaurantes paginados",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Valor de la pagina para que se muestre las comidas paginadas, en total 4 por cada pagina",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": 1,
              "enum": [1, 2, 3]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Organiza ya sea ascendentemente como descendentemente los restaurantes por A-Z y Z-A, tambien se puede hacer por rating de mejor a peor o de peor a mejor, si no se coloca nada te organiza de mayor rating a menor rating",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["alphaasc", "alphadesc", "ratingasc", "ratingdesc"]
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filtra segun las tags que le envias por query, cada tag debe venir separada por el signo '~'",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["pasta", "hamburguesas", "papas"]
            }
          },
          {
          "name": "country",
          "in": "query",
          "description": "Filtra segun el país que le envias por query, devuelve restaurants de ese país",
          "required": false,
          "explode": true,
          "schema": {
            "type": "string",
            "enum": ["Argentina", "Perú", "Colombia"]
          }


          },
          {
            "name": "rating",
            "in": "query",
            "description": "Filtra segun el rating que le envias por query, devuelve restaurants con rating mayor o igual",
            "required": false,
            "explode": true,
            "schema": {
              "type": "number",
              "enum": [1, 2, 3, 4, 5]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Ruta /restaurants con parametros invalidos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants404"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["restaurants"],
        "summary": "Creacion de un restaurante",
        "description": "Esta ruta tomara todos los datos del restaurante por body y lo creara en la base de datos",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "Ejemplo de lo que espera la ruta por body (no colocar id ni rating)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants404"
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/:id": {
      "get": {
        "tags": ["restaurants"],
        "description": "Realiza la busqueda de un restaurante en especifico segun el id que le envien por parametro",
        "operationId": "getRestaurantsId",
        "summary": "Traer restaurante por ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del restaurante",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Id invalido llegado por params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantsId404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["restaurants"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["restaurants"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Restaurants"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurants"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/posts": {
      "post": {
        "tags": ["posts"],
        "summary": "creará un posts de esa comida. recibe todo por body ",
        "description": "creará un posteo de esa comida. recibe todo por body  ",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "Crear el plato de comida",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Posts"
                }
              }
            }
          },
          "400": {
            "description": "posts validation failed: name: Path `name` is required., description: Path `description` is required."
          }
        }
      },
      "get": {
        "tags": ["posts"],
        "summary": "Obtener posts por query ",
        "description": "Se debe mandar un Query page=num .Trae todas las comidas paginadas, con posibilidad de filtros ",
        "operationId": "getPosts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Valor del page para que se muestre las comidas paginadas",
            "required": false,
            "explode": true,
            "schema": {
              "type": "int",
              "default": 1,
              "enum": [1, 2, 3]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operación exitosa"
          },
          "400": {
            "description": "Error por parte del cliente"
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": ["posts"],
        "summary": "Obtener posts por ID",
        "description": "Retorna el posts buscado por el ID proporcionado",
        "operationId": "getPostById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del posts para retornar",
            "required": true,
            "schema": {
              "type": "string",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operación exitosa"
          },
          "400": {
            "description": "Error por parte del cliente"
          }
        }
      },
      "delete": {
        "tags": ["posts"],
        "summary": "Delete posts",
        "description": "Para eliminar un posts",
        "operationId": "deletePosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "El ID del post para eliminar",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalido ID brindado"
          }
        }
      },
      "put": {
        "tags": ["posts"],
        "summary": "Actualizar un post por ID",
        "description": "Para actualizar un post se pasa el ID por PARAMS y los datos a actualizar mediante el body",

        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del post a actualizar",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post actualizado exitosamente"
          },
          "404": {
            "description": "No se encontró el post con el ID proporcionado"
          },
          "500": {
            "description": "Error interno del servidor"
          }
        }
      }
    },

    "/tables": {
      "post": {
        "tags": ["tables"],
        "description": "con esta ruta pasan los datos del restaurante por body, al momento de crear no relacionar, relacionar después de crear con la ruta PUT",
        "operationId": "postRestaurants",
        "requestBody": {
          "description": "create a restaurant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Restaurants"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/tables/:id": {
      "get": {
        "tags": ["tables"],
        "summary": "Find restaurants by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "post": {
        "tags": ["tables"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "delete": {
        "tags": ["tables"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["tables"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Tables"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tables"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },

    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "All users",
        "description": "Retorna todos los usuarios, por defecto en un orden descendente por rating",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "Orden en el que se desea recibir los usuarios, alfabeticamente o por rating",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["alphaasc", "alphadesc", "ratingasc", "ratingdesc"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Número de pagina deseado",
            "required": true,
            "schema": {
              "type": "string",
              "default":1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Usuario inexistente"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "description": "con esta ruta pasan los datos del usuario por body, al momento de crear no relacionar, relacionar después de crear con la ruta PUT",
        "operationId": "postusers",
        "requestBody": {
          "description": "propiedades con sus valores de creacion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "readOnly": true,
          "x-displayName": "Post Users"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tipo de dato incorrecto"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/users/:id": {
      "get": {
        "tags": ["users"],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id del ususario que desea obtener",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Usuario inexistente"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes a pet",
        "description": "Borrar un usuario por medio de su id",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id de usuario que desea borrar",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid pet value"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Actualizar un usuario en específico",
        "description": "Actualizar un usuario en específico proporcionando su id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Atributo a actualizar con su valor",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Posts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Nombre"
          },
          "description": {
            "type": "string",
            "example": "Descripcion"
          },
          "image": {
            "type": "string",
            "example": "www.imagen.com"
          },
          "tags": {
            "type": "array",
            "example": ["test1", "test2"]
          },
          "ingredients": {
            "type": "string",
            "example": "Ingredientes secretos"
          },
          "original": {
            "type": "boolean",
            "example": true
          },
          "cost": {
            "type": "number",
            "example": 127
          },
          "rating": {
            "type": "array",
            "example": [2, 3]
          }
        },
        "xml": {
          "name": "posts"
        }
      },
      "Restaurants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "name": {
            "type": "string",
            "example": "Don Julio y Tegui"
          },
          "image": {
            "type": "Buffer",
            "example": "<Buffer 48 65 6c 6c 6f>"
          },
          "type_customer": {
            "type": "string",
            "example": "XXXXX"
          },
          "description": {
            "type": "string",
            "example": "La parrilla Don Julio, ubicada en el barrio de Palermo ..."
          },
          "tags": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          },
          "city": {
            "type": "string",
            "example": "Buenos Aires"
          },
          "address": {
            "type": "string",
            "example": "Guatemala 4699 Palermo Viejo"
          },
          "country": {
            "type": "string",
            "example": "Argentina"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+54 11 5311-5668"
          },
          "valoraciones": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          },
          "rating": {
            "type": "number",
            "example": 2
          }
        },
        "xml": {
          "name": "restaurants"
        }
      },
      "Restaurants404": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "cannot get invalid route"
          }
        }
      },
      "RestaurantsId404": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer"
          }
        }
      },
      "Tables": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "capacity": {
            "type": "number",
            "example": "6"
          }
        },
        "xml": {
          "name": "tables"
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Lali Esposito"
          },
          "email": {
            "type": "string",
            "example": "laliEsposito@gmail.com"
          },
          "image": {
            "type": "Buffer",
            "example": "<Buffer 48 65 6c 6c 6f>"
          },
          "type_customer": {
            "type": "string",
            "example": "?????????"
          },
          "description": {
            "type": "string",
            "example": "Descripcion corta"
          },
          "valoraciones": {
            "type": "array",
            "xml": {
              "XXXX": "xxxx",
              "XX": "xx"
            },
            "items": {}
          },
          "rating": {
            "type": "number",
            "example": 2
          }
        },
        "xml": {
          "name": "users"
        }
      }
    }
  }
}
